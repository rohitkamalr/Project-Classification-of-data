{
  
    
        "post0": {
            "title": "Classification of 3s and 8s using Neural Network and Logistic Regression",
            "content": "Config class . class Config: pass config = Config() config.lr = 0.001 config.num_epochs = 220 config.bs = 50 . Importing Functions from kudzu library . from kudzu.data import Data, Sampler, Dataloader from kudzu.layer import Affine, Sigmoid, Relu from kudzu.loss import BCE from kudzu.model import Model from kudzu.optim import GD from kudzu.train import Learner from kudzu.callbacks import AccCallback, take_mean . ClfCallback class . acc = AccCallback class CLfCallback(acc): def __init__(self,learner,bs): super().__init__(learner,bs) self.accuracies = [] self.test_accuracies = [] def epoch_end(self, train_prob, test_prob, predicted_test): for layer, name, fnval, grval in self.learner.model.params_and_grads(): self.paramhist[layer.name+&#39;_&#39;+name].append(fnval) self.gradhist[layer.name+&#39;_&#39;+name].append(grval) eloss = take_mean(self.batch_losses[-self.bpe:], self.bpe, self.afrac) self.losses.append(eloss) self.accuracies.append(train_prob) self.test_accuracies.append(test_prob) self.predictions = np.array(predicted_test) if self.epoch % 10 ==0: print(f&quot;Epoch {self.epoch} Loss {eloss} n train accuracy: {train_prob} test accuracy: {test_prob} n n&quot;) . Neural Network model . model = Model(layers) data = Data(X_train, y_train1) sampler = Sampler(data, config.bs, shuffle = True) dl = Dataloader(data, sampler) loss = BCE() opt = GD(config.lr) . learner = Learner(loss, model, opt, config.num_epochs) ccb = CLfCallback(learner, config.bs) learner.set_callbacks([ccb]) . Loop training process begins . Epoch 0 Loss 0.6944272896535906 train accuracy: 0.5039225504924053 test accuracy: 0.5463709677419355 Epoch 10 Loss 0.23939719656220246 train accuracy: 0.9281422133199799 test accuracy: 0.9430443548387096 Epoch 20 Loss 0.1349055195987402 train accuracy: 0.9547654815556669 test accuracy: 0.9642137096774194 Epoch 30 Loss 0.11410356178922798 train accuracy: 0.9620263728926723 test accuracy: 0.9672379032258065 Epoch 40 Loss 0.10385754069563094 train accuracy: 0.9651977966950426 test accuracy: 0.967741935483871 Epoch 50 Loss 0.09660522049612413 train accuracy: 0.9686195960607578 test accuracy: 0.967741935483871 Epoch 60 Loss 0.09075657548469941 train accuracy: 0.971707561342013 test accuracy: 0.96875 Epoch 70 Loss 0.08563459041471377 train accuracy: 0.9732098147220831 test accuracy: 0.969758064516129 Epoch 80 Loss 0.08119748672154196 train accuracy: 0.9750459021866132 test accuracy: 0.969758064516129 Epoch 90 Loss 0.07696080785028994 train accuracy: 0.9760474044399933 test accuracy: 0.9727822580645161 Epoch 100 Loss 0.07296333081443167 train accuracy: 0.9781338674678685 test accuracy: 0.9727822580645161 Epoch 110 Loss 0.06915692894704971 train accuracy: 0.9793857452845935 test accuracy: 0.9732862903225806 Epoch 120 Loss 0.06546621081898801 train accuracy: 0.9804707060590886 test accuracy: 0.9747983870967742 Epoch 130 Loss 0.06185545064358951 train accuracy: 0.9812218327491237 test accuracy: 0.9753024193548387 Epoch 140 Loss 0.058384510528426664 train accuracy: 0.9829744616925388 test accuracy: 0.9768145161290323 Epoch 150 Loss 0.05513631228788316 train accuracy: 0.9843097980303789 test accuracy: 0.9763104838709677 Epoch 160 Loss 0.051975744753864885 train accuracy: 0.985561675847104 test accuracy: 0.9778225806451613 Epoch 170 Loss 0.048981844404738725 train accuracy: 0.986646636621599 test accuracy: 0.9793346774193549 Epoch 180 Loss 0.046103678535701055 train accuracy: 0.9875646803538641 test accuracy: 0.9778225806451613 Epoch 190 Loss 0.04351145081435174 train accuracy: 0.9887330996494742 test accuracy: 0.9798387096774194 Epoch 200 Loss 0.0409971017336601 train accuracy: 0.9891503922550492 test accuracy: 0.9798387096774194 Epoch 210 Loss 0.03862579649812183 train accuracy: 0.9899015189450843 test accuracy: 0.9818548387096774 . 0.04152962350887603 . max(ccb.accuracies), max(ccb.test_accuracies) . (0.9907361041562344, 0.9818548387096774) . Text(0.5, 1.0, &#39;Losses plot of Neural Network&#39;) . Confusion Matrix for Neural Network . Number of False positives: 18 Number of False negatives: 21 . Logistic Regression model . Epoch 0 Loss 0.5758797964350444 train accuracy: 0.7598898347521282 test accuracy: 0.8830645161290323 Epoch 10 Loss 0.2597958623455349 train accuracy: 0.9304790519112002 test accuracy: 0.9400201612903226 Epoch 20 Loss 0.20838484969722457 train accuracy: 0.9410782840928059 test accuracy: 0.9490927419354839 Epoch 30 Loss 0.1843124101780231 train accuracy: 0.9455015857119012 test accuracy: 0.9566532258064516 Epoch 40 Loss 0.1698651058356312 train accuracy: 0.9480887998664663 test accuracy: 0.9596774193548387 Epoch 50 Loss 0.1600326013759786 train accuracy: 0.9515940577532966 test accuracy: 0.9621975806451613 Epoch 60 Loss 0.15283259364441443 train accuracy: 0.9535970622600568 test accuracy: 0.9637096774193549 Epoch 70 Loss 0.14728390986482529 train accuracy: 0.9548489400767819 test accuracy: 0.9647177419354839 Epoch 80 Loss 0.14284384063478048 train accuracy: 0.956601569020197 test accuracy: 0.9647177419354839 Epoch 90 Loss 0.13918969750902457 train accuracy: 0.957352695710232 test accuracy: 0.9647177419354839 Epoch 100 Loss 0.13612525080299756 train accuracy: 0.9585211150058421 test accuracy: 0.9647177419354839 Epoch 110 Loss 0.13349668301779702 train accuracy: 0.9591053246536472 test accuracy: 0.9657258064516129 Epoch 120 Loss 0.1312208348942301 train accuracy: 0.9596060757803372 test accuracy: 0.9662298387096774 Epoch 130 Loss 0.12921655341378618 train accuracy: 0.9596895343014522 test accuracy: 0.9662298387096774 Epoch 140 Loss 0.12744018286673695 train accuracy: 0.9603572024703723 test accuracy: 0.9667338709677419 Epoch 150 Loss 0.12584798823310733 train accuracy: 0.9609414121181773 test accuracy: 0.9667338709677419 Epoch 160 Loss 0.12441378312178514 train accuracy: 0.9613587047237523 test accuracy: 0.9667338709677419 Epoch 170 Loss 0.12310661958668806 train accuracy: 0.9616090802870974 test accuracy: 0.9667338709677419 Epoch 180 Loss 0.12192003628754876 train accuracy: 0.9619429143715573 test accuracy: 0.9682459677419355 Epoch 190 Loss 0.12082646271452416 train accuracy: 0.9621932899349024 test accuracy: 0.9682459677419355 Epoch 200 Loss 0.11981756657810641 train accuracy: 0.9626105825404774 test accuracy: 0.9682459677419355 Epoch 210 Loss 0.11888141139615957 train accuracy: 0.9633617092305125 test accuracy: 0.9682459677419355 . 0.2850757121976477 . max(ccb_logistic.accuracies), max(ccb_logistic.test_accuracies) . (0.9635286262727425, 0.9682459677419355) . By these plots we can observe that when performing logistic regression instead of Neural network, our accuracy is less in logistic regression but overfitting doesn&#39;t seem to happen in logistic regression . Confusion Matrix for Logistic Regression . array([[940, 34], [ 29, 981]], dtype=int64) .",
            "url": "https://rohitkamalr.github.io/Project-Classification-of-data/2020/08/09/project-2.html",
            "relUrl": "/2020/08/09/project-2.html",
            "date": " • Aug 9, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Classification of 3s and 8s using Neural Network and Logistic Regression",
            "content": "Config class . class Config: pass config = Config() config.lr = 0.001 config.num_epochs = 220 config.bs = 50 . Importing Functions from kudzu library . from kudzu.data import Data, Sampler, Dataloader from kudzu.layer import Affine, Sigmoid, Relu from kudzu.loss import BCE from kudzu.model import Model from kudzu.optim import GD from kudzu.train import Learner from kudzu.callbacks import AccCallback, take_mean . ClfCallback class . acc = AccCallback class CLfCallback(acc): def __init__(self,learner,bs): super().__init__(learner,bs) self.accuracies = [] self.test_accuracies = [] def epoch_end(self, train_prob, test_prob, predicted_test): for layer, name, fnval, grval in self.learner.model.params_and_grads(): self.paramhist[layer.name+&#39;_&#39;+name].append(fnval) self.gradhist[layer.name+&#39;_&#39;+name].append(grval) eloss = take_mean(self.batch_losses[-self.bpe:], self.bpe, self.afrac) self.losses.append(eloss) self.accuracies.append(train_prob) self.test_accuracies.append(test_prob) self.predictions = np.array(predicted_test) if self.epoch % 10 ==0: print(f&quot;Epoch {self.epoch} Loss {eloss} n train accuracy: {train_prob} test accuracy: {test_prob} n n&quot;) . Neural Network model . model = Model(layers) data = Data(X_train, y_train1) sampler = Sampler(data, config.bs, shuffle = True) dl = Dataloader(data, sampler) loss = BCE() opt = GD(config.lr) . learner = Learner(loss, model, opt, config.num_epochs) ccb = CLfCallback(learner, config.bs) learner.set_callbacks([ccb]) . Loop training process begins . Epoch 0 Loss 0.6944272896535906 train accuracy: 0.5039225504924053 test accuracy: 0.5463709677419355 Epoch 10 Loss 0.23939719656220246 train accuracy: 0.9281422133199799 test accuracy: 0.9430443548387096 Epoch 20 Loss 0.1349055195987402 train accuracy: 0.9547654815556669 test accuracy: 0.9642137096774194 Epoch 30 Loss 0.11410356178922798 train accuracy: 0.9620263728926723 test accuracy: 0.9672379032258065 Epoch 40 Loss 0.10385754069563094 train accuracy: 0.9651977966950426 test accuracy: 0.967741935483871 Epoch 50 Loss 0.09660522049612413 train accuracy: 0.9686195960607578 test accuracy: 0.967741935483871 Epoch 60 Loss 0.09075657548469941 train accuracy: 0.971707561342013 test accuracy: 0.96875 Epoch 70 Loss 0.08563459041471377 train accuracy: 0.9732098147220831 test accuracy: 0.969758064516129 Epoch 80 Loss 0.08119748672154196 train accuracy: 0.9750459021866132 test accuracy: 0.969758064516129 Epoch 90 Loss 0.07696080785028994 train accuracy: 0.9760474044399933 test accuracy: 0.9727822580645161 Epoch 100 Loss 0.07296333081443167 train accuracy: 0.9781338674678685 test accuracy: 0.9727822580645161 Epoch 110 Loss 0.06915692894704971 train accuracy: 0.9793857452845935 test accuracy: 0.9732862903225806 Epoch 120 Loss 0.06546621081898801 train accuracy: 0.9804707060590886 test accuracy: 0.9747983870967742 Epoch 130 Loss 0.06185545064358951 train accuracy: 0.9812218327491237 test accuracy: 0.9753024193548387 Epoch 140 Loss 0.058384510528426664 train accuracy: 0.9829744616925388 test accuracy: 0.9768145161290323 Epoch 150 Loss 0.05513631228788316 train accuracy: 0.9843097980303789 test accuracy: 0.9763104838709677 Epoch 160 Loss 0.051975744753864885 train accuracy: 0.985561675847104 test accuracy: 0.9778225806451613 Epoch 170 Loss 0.048981844404738725 train accuracy: 0.986646636621599 test accuracy: 0.9793346774193549 Epoch 180 Loss 0.046103678535701055 train accuracy: 0.9875646803538641 test accuracy: 0.9778225806451613 Epoch 190 Loss 0.04351145081435174 train accuracy: 0.9887330996494742 test accuracy: 0.9798387096774194 Epoch 200 Loss 0.0409971017336601 train accuracy: 0.9891503922550492 test accuracy: 0.9798387096774194 Epoch 210 Loss 0.03862579649812183 train accuracy: 0.9899015189450843 test accuracy: 0.9818548387096774 . 0.04152962350887603 . max(ccb.accuracies), max(ccb.test_accuracies) . (0.9907361041562344, 0.9818548387096774) . Text(0.5, 1.0, &#39;Losses plot of Neural Network&#39;) . Confusion Matrix for Neural Network . Number of False positives: 18 Number of False negatives: 21 . Logistic Regression model . Epoch 0 Loss 0.5758797964350444 train accuracy: 0.7598898347521282 test accuracy: 0.8830645161290323 Epoch 10 Loss 0.2597958623455349 train accuracy: 0.9304790519112002 test accuracy: 0.9400201612903226 Epoch 20 Loss 0.20838484969722457 train accuracy: 0.9410782840928059 test accuracy: 0.9490927419354839 Epoch 30 Loss 0.1843124101780231 train accuracy: 0.9455015857119012 test accuracy: 0.9566532258064516 Epoch 40 Loss 0.1698651058356312 train accuracy: 0.9480887998664663 test accuracy: 0.9596774193548387 Epoch 50 Loss 0.1600326013759786 train accuracy: 0.9515940577532966 test accuracy: 0.9621975806451613 Epoch 60 Loss 0.15283259364441443 train accuracy: 0.9535970622600568 test accuracy: 0.9637096774193549 Epoch 70 Loss 0.14728390986482529 train accuracy: 0.9548489400767819 test accuracy: 0.9647177419354839 Epoch 80 Loss 0.14284384063478048 train accuracy: 0.956601569020197 test accuracy: 0.9647177419354839 Epoch 90 Loss 0.13918969750902457 train accuracy: 0.957352695710232 test accuracy: 0.9647177419354839 Epoch 100 Loss 0.13612525080299756 train accuracy: 0.9585211150058421 test accuracy: 0.9647177419354839 Epoch 110 Loss 0.13349668301779702 train accuracy: 0.9591053246536472 test accuracy: 0.9657258064516129 Epoch 120 Loss 0.1312208348942301 train accuracy: 0.9596060757803372 test accuracy: 0.9662298387096774 Epoch 130 Loss 0.12921655341378618 train accuracy: 0.9596895343014522 test accuracy: 0.9662298387096774 Epoch 140 Loss 0.12744018286673695 train accuracy: 0.9603572024703723 test accuracy: 0.9667338709677419 Epoch 150 Loss 0.12584798823310733 train accuracy: 0.9609414121181773 test accuracy: 0.9667338709677419 Epoch 160 Loss 0.12441378312178514 train accuracy: 0.9613587047237523 test accuracy: 0.9667338709677419 Epoch 170 Loss 0.12310661958668806 train accuracy: 0.9616090802870974 test accuracy: 0.9667338709677419 Epoch 180 Loss 0.12192003628754876 train accuracy: 0.9619429143715573 test accuracy: 0.9682459677419355 Epoch 190 Loss 0.12082646271452416 train accuracy: 0.9621932899349024 test accuracy: 0.9682459677419355 Epoch 200 Loss 0.11981756657810641 train accuracy: 0.9626105825404774 test accuracy: 0.9682459677419355 Epoch 210 Loss 0.11888141139615957 train accuracy: 0.9633617092305125 test accuracy: 0.9682459677419355 . 0.2850757121976477 . max(ccb_logistic.accuracies), max(ccb_logistic.test_accuracies) . (0.9635286262727425, 0.9682459677419355) . Confusion Matrix for Logistic Regression . array([[940, 34], [ 29, 981]], dtype=int64) . By these plots we can observe that when performing logistic regression instead of Neural network, our accuracy is less in logistic regression but overfitting doesn&#39;t seem to happen in logistic regression The number of false values in case of Logistic regression model are more than the Neural Network Model .",
            "url": "https://rohitkamalr.github.io/Project-Classification-of-data/2020/08/09/project-2-(1).html",
            "relUrl": "/2020/08/09/project-2-(1).html",
            "date": " • Aug 9, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://rohitkamalr.github.io/Project-Classification-of-data/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://rohitkamalr.github.io/Project-Classification-of-data/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://rohitkamalr.github.io/Project-Classification-of-data/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rohitkamalr.github.io/Project-Classification-of-data/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}